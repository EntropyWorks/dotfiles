# Yazz bash stuff
#export LC_CTYPE="utf-8"

export PATH=/usr/local/bin/usr/local/sbin:${PATH}
export PATH=/opt/local/bin:/opt/local/sbin:${PATH}
export PATH=${PATH}:${HOME}/Applications/android-sdk-mac_86/tools
export PATH=${PATH}:${HOME}/Library/Haskell/bin
export PATH=${PATH}:${HOME}/Work/diskimage-builder/bin
export PATH=${PATH}:${HOME}/.bin
export PATH=${PATH}:.

export GIT_SSL_NO_VERIFY=true
export GIT_SSL_NO_VERIFY=1
export GIT_GPG_GROUP=true

export EDITOR=/usr/bin/vim
export TM_SUPPORT_PATH="/Library/Application Support/TextMate/Support"
export HISTTIMEFORMAT='%F %T '
export HISTCONTROL=ignoredups
export HISTCONTROL=erasedups
export EDITOR="/usr/bin/vim"

#export RUBYLIB=${HOME}/knife-plugins/lib

# Bash Aliases
[[ -s "${HOME}/.bash_aliases" ]] && source "${HOME}/.bash_aliases"
# Ruby Stuff
[[ -s "${HOME}/.rvm/scripts/rvm" ]] && source "${HOME}/.rvm/scripts/rvm"

#if [[ -z "${MANPATH:-}" ]]; then
#  export MANPATH="${rvm_man_path}"
#elif ! [[ ":${MANPATH}:" =~ ":${rvm_man_path}:" ]]; then
#  export MANPATH="${MANPATH}:${rvm_man_path}"
#fi

# Hp Setup One
[[ -s "${HOME}/.bash_hpcloud" ]] && source "${HOME}/.bash_hpcloud" 

# bash_functions
[[ -s "${HOME}/.bash_functions" ]] && source "${HOME}/.bash_functions"

# Bash completion
[[ -s "/etc/bash_completion" ]] && source "/etc/bash_completion"
[[ -s "/opt/local/etc/bash_completion" ]] && source "/opt/local/etc/bash_completion"

[[ -f /usr/local/bin/brew ]] && [[ -f "$(brew --prefix)/etc/bash_completion" ]] && source "$(brew --prefix)/etc/bash_completion"

# Moved my prompt out of this file since its so big
[[ -s "${HOME}/.bash_prompt" ]] && source "${HOME}/.bash_prompt"

# This doesn't work right 
#if [ -f ${HOME}/.bash_knife-completion ]; then
#  source $(readlink ${HOME}/.bash_knife-completion)
#fi

# This doesn't work right 
[[ -f "${HOME}/.bash_ssh-completion" ]] && source "$(readlink ${HOME}/.bash_ssh-completion)"

# This is annoying someone renamed the file in the port a while ago
#if [ -f /opt/local/etc/profile.d/bash_completion.sh ]; then
#  . /opt/local/etc/profile.d/bash_completion.sh
#fi


[ -z "$PS1" ] && return
#echo " Running interactively"

export LSCOLORS=gxBxhxDxfxhxhxhxhxcxcx
export CLICOLOR=1

# If not running interactively, don't do anything
# append to the history file, don't overwrite it
shopt -s histappend
shopt -s checkwinsize

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace
#HISTCONTROL=ignorespace

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

[[ ! -d ${HOME}/.bash_history_dir/ ]] && mkdir ${HOME}/.bash_history_dir && chmod 755 ${HOME}/.bash_history_dir

if [[ "$WINDOW" != "" ]] ; then
  export HISTFILE="${HOME}/.bash_history_dir/$(hostname).${SUDO_USER:-${USER}}.$WINDOW" ;
else
  export HISTFILE="${HOME}/.bash_history_dir/$(hostname).${SUDO_USER:-${USER}}.$(tty | sed -s 's/\//_/g')"
fi
# Not everyone likes seeing this
#echo " HISTFILE=${HISTFILE}"



# Imperative that this environment variable always reflects the output
# of the tty command.
GPG_TTY=`tty`
export GPG_TTY

# Script for ensuring only one instance of gpg-agent is running
# and if there is not one, start an instance of gpg-agent.
#if test -f ${HOME}/.gpg-agent-info && kill -0 `cut -d: -f 2 ${HOME}/.gpg-agent-info` 2>/dev/null; then
#  GPG_AGENT_INFO=`cat ${HOME}/.gpg-agent-info`
#  SSH_AUTH_SOCK=`cat ${HOME}/.ssh-auth-sock`
#  SSH_AGENT_PID=`cat ${HOME}/.ssh-agent-pid`
#  export GPG_AGENT_INFO 
#else
#  eval $(gpg-agent --daemon --enable-ssh-support)
#  echo $GPG_AGENT_INFO >${HOME}/.gpg-agent-info
#  echo $SSH_AUTH_SOCK > ${HOME}/.ssh-auth-sock
#  echo $SSH_AGENT_PID > ${HOME}/.ssh-agent-pid
#fi
