# Yazz bash stuff
#export LC_CTYPE="utf-8"

export PATH=/opt/local/bin:/opt/local/sbin:${PATH}
export PATH=${PATH}:/usr/local/packer:/opt/packer
export PATH=${PATH}:${HOME}/.bin/git-hub/lib
export PATH=${PATH}:${HOME}/Applications/android-sdk-mac_86/tools
export PATH=${PATH}:${HOME}/Library/Haskell/bin
export PATH=${PATH}:${HOME}/Applications/VMware\ Fusion.app/Contents/Library
export PATH=${PATH}:${HOME}/Work/diskimage-builder/bin
export PATH=${PATH}:${HOME}/.bin
export PATH=${PATH}:${HOME}/Library/Android/sdk/platform-tools
export PATH=${PATH}:/usr/local/opt/go/libexec/bin
export PATH=${PATH}:${HOME}/Code/go/bin
export PATH=${PATH}:/usr/local/bin:/usr/local/sbin:${PATH}
export PATH=${PATH}:.

export GOPATH=${HOME}/Code/go

export GTK_PATH=/usr/local/lib/gtk-2.0

if [ -f ~/.vagrant.d/data/vagrant_login_token ] ; then
  export ATLAS_TOKEN=`cat ~/.vagrant.d/data/vagrant_login_token`
fi
export EDITOR=/usr/bin/vim
export TM_SUPPORT_PATH="/Library/Application Support/TextMate/Support"
export HISTTIMEFORMAT='%F %T '
export HISTCONTROL=ignoredups
export HISTCONTROL=erasedups
export EDITOR="/usr/bin/vim"

#export RUBYLIB=${HOME}/knife-plugins/lib

export VAGRANT_DEFAULT_PROVIDER="virtualbox"

# Bash Aliases
[[ -s "${HOME}/.bash_aliases" ]] && source "${HOME}/.bash_aliases"
# Ruby Stuff
[[ -s "${HOME}/.rvm/scripts/rvm" ]] && source "${HOME}/.rvm/scripts/rvm"

# VMware Fusion
export VAGRANT_VMWARE_FUSION_APP="/Apps/VMware Fusion.app"
if [ -d "/Applications/VMware Fusion.app/Contents/Library" ]; then
    export PATH=$PATH:"/Applications/VMware Fusion.app/Contents/Library"
fi

#if [[ -z "${MANPATH:-}" ]]; then
#  export MANPATH="${rvm_man_path}"
#elif ! [[ ":${MANPATH}:" =~ ":${rvm_man_path}:" ]]; then
#  export MANPATH="${MANPATH}:${rvm_man_path}"
#fi


# bash_functions
[[ -s "${HOME}/.bash_functions" ]] && source "${HOME}/.bash_functions"

# Bash completion
[[ -s "/etc/bash_completion" ]] && source "/etc/bash_completion"
[[ -s "/opt/local/etc/bash_completion" ]] && source "/opt/local/etc/bash_completion"

[[ -f /usr/local/bin/brew ]] && [[ -f "$(brew --prefix)/etc/bash_completion" ]] && source "$(brew --prefix)/etc/bash_completion"

# Moved my prompt out of this file since its so big
[[ -s "${HOME}/.bash_prompt" ]] && source "${HOME}/.bash_prompt"

# You should add the following to your .bashrc (or equivalent):
#if [ -f "$(brew --prefix bash-git-prompt)/share/gitprompt.sh" ]; then
#    GIT_PROMPT_THEME=Default
#    source "$(brew --prefix bash-git-prompt)/share/gitprompt.sh"
#fi

# This doesn't work right 
#if [ -f ${HOME}/.bash_knife-completion ]; then
#  source $(readlink ${HOME}/.bash_knife-completion)
#fi

# This doesn't work right 
[[ -f "${HOME}/.bash_ssh-completion" ]] && source "$(readlink ${HOME}/.bash_ssh-completion)"

# This is annoying someone renamed the file in the port a while ago
#if [ -f /opt/local/etc/profile.d/bash_completion.sh ]; then
#  . /opt/local/etc/profile.d/bash_completion.sh
#fi

# Hp Setup One
[[ -s "${HOME}/.bash_hpcloud" ]] && source "${HOME}/.bash_hpcloud" 


[ -z "$PS1" ] && return
#echo " Running interactively"

export LSCOLORS=gxBxhxDxfxhxhxhxhxcxcx
export CLICOLOR=1

# If not running interactively, don't do anything
# append to the history file, don't overwrite it
shopt -s histappend
shopt -s checkwinsize

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace
#HISTCONTROL=ignorespace

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

[[ ! -d ${HOME}/.bash_history_dir/ ]] && mkdir ${HOME}/.bash_history_dir && chmod 755 ${HOME}/.bash_history_dir

if [[ "$WINDOW" != "" ]] ; then
  export HISTFILE="${HOME}/.bash_history_dir/$(hostname).${SUDO_USER:-${USER}}.$WINDOW" ;
else
  export HISTFILE="${HOME}/.bash_history_dir/$(hostname).${SUDO_USER:-${USER}}.$(tty | sed 's/\//_/g')"
fi
# Not everyone likes seeing this
#echo " HISTFILE=${HISTFILE}"

# check current settings
# stty -a | egrep -o -- '-?\<(ix\w*|start|stop)'

if [ -z "$PS1" ]; then
   echo "This shell is not interactive"
else
    #echo This shell is interactive
    if [ -t 0 ]; then       # check for a terminal
        # Turn off TTY "start" and "stop" commands in all interactive shells.
        # They default to C-q and C-s, Bash uses C-s to do a forward history search.
        # I used C-s for tmux window swap
        stty start ''
        stty stop  ''
        stty -ixon ; # disable XON/XOFF flow control
        stty ixoff ; # enable sending (to app) of start/stop characters
        stty ixany ; # let any character restart output, not only start character

    fi
fi


# enable bash completion in interactive shells
if [ -f "$HOME/.bash_completion_tmux.sh" ]; then
    . "$HOME/.bash_completion_tmux.sh"
fi
# enable iterm2 intergration
if [ -f "$HOME/.bash_iterm2_shell_integration" ]; then
    . "$HOME/.bash_iterm2_shell_integration"
fi

export GIT_SSL_NO_VERIFY=true
export GIT_SSL_NO_VERIFY=1
export GIT_GPG_GROUP=true

# Imperative that this environment variable always reflects the output
# of the tty command.
#export SSH_AUTH_SOCK=/Users/yazz/.gnupg/S.gpg-agent.ssh

GPG_TTY=`tty`
export GPG_TTY

if test -f $HOME/.gpg-agent-info && \
  kill -0 $(grep GPG_AGENT_INFO $HOME/.gpg-agent-info | cut -d: -f 2) 2>/dev/null; then
    . "${HOME}/.gpg-agent-info"
    #echo "first . ${HOME}/.gpg-agent-info"
    export GPG_AGENT_INFO
    export SSH_AUTH_SOCK
    export SSH_AGENT_PID
else
  eval `gpg-agent --daemon --verbose --enable-ssh-support --log-file "${HOME}/.gpg-agent.log" --write-env-file "${HOME}/.gpg-agent-info"`
  . "${HOME}/.gpg-agent-info"
  #echo "second . ${HOME}/.gpg-agent-info"
  export GPG_AGENT_INFO
  export SSH_AUTH_SOCK
  export SSH_AGENT_PID
fi

#if [ -f "${HOME}/.gpg-agent-info" ]; then
#  . "${HOME}/.gpg-agent-info"
#  echo "third . ${HOME}/.gpg-agent-info"
#  export GPG_AGENT_INFO
#  export SSH_AUTH_SOCK
#  export SSH_AGENT_PID
#fi

export FLEETCTL_TUNNEL=127.0.0.1:2222
export FLEETCTL_SSH_USERNAME=core
export FLEETCTL_KNOWN_HOSTS_FILE=/dev/null

export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/local/lib

PERL_MB_OPT="--install_base \"/Users/yazz/perl5\""; export PERL_MB_OPT;
PERL_MM_OPT="INSTALL_BASE=/Users/yazz/perl5"; export PERL_MM_OPT;


export PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting
### Added by the Bluemix CLI
[[ -s "${HOME}/.bash_aliases" ]] && source "${HOME}/.bash_aliases"
[[ -s "/usr/local/Bluemix/bx/bash_autocomplete" ]] && source /usr/local/Bluemix/bx/bash_autocomplete
test -e "${HOME}/.iterm2_shell_integration.bash" && source "${HOME}/.iterm2_shell_integration.bash"
